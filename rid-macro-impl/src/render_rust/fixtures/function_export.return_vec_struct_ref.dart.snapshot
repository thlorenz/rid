 extension Rid_Vec_ExtOnPointerRidVec_Pointer_MyStruct on ffigen_bind.RidVec_Pointer_MyStruct {
   dart_ffi.Pointer<ffigen_bind.RawMyStruct> operator [](int idx) {
     final len = this.length;
     if (!(0 <= idx && idx < len)) {
       throw AssertionError("Out of range access on List<dart_ffi.Pointer<ffigen_bind.RawMyStruct>>[$idx] of length $len");
     }
     return rid_ffi.rid_get_item_ridvec_mystruct(this, idx);
   }

    **WARNING**: You cannot use this Vec pointer anymore after this call
    completes unless you set [autoDispose] to [false].

    Converts this Vec pointer into a Dart [List&lt;MyStruct&gt;] and disposes the
    underlying Rust Vec unless [autoDispose] is set to [false].
    As a result if [autoDispose] is [true] you cannot use the underlying
    Vec anymore after this call completes.
   List<MyStruct> toDart({bool autoDispose = true}) {
     ridStoreLock();
     final list = this.iter().map((raw) => raw.toDart()).toList();
     if (autoDispose) dispose();
     ridStoreUnlock();
     return list;
   }
   void dispose() {
     rid_ffi.rid_free_ridvec_mystruct(this);
   }

   Rid_RidVec_Pointer_MyStruct_Iterable iter() => Rid_RidVec_Pointer_MyStruct_Iterable(this);
 }

 class Rid_RidVec_Pointer_MyStruct_Iterator implements Iterator<dart_ffi.Pointer<ffigen_bind.RawMyStruct>> {
   int _currentIdx = -1;
   final ffigen_bind.RidVec_Pointer_MyStruct _vec;
   final int _limit;

   Rid_RidVec_Pointer_MyStruct_Iterator(this._vec) : _limit = _vec.length - 1;

   dart_ffi.Pointer<ffigen_bind.RawMyStruct> get current => _vec[_currentIdx];

   bool moveNext() {
     if (_currentIdx >= _limit) return false;
     _currentIdx++;
     return true;
   }
 }

 class Rid_RidVec_Pointer_MyStruct_Iterable with
     dart_collection.IterableMixin<dart_ffi.Pointer<ffigen_bind.RawMyStruct>> {
   final ffigen_bind.RidVec_Pointer_MyStruct _vec;
   Rid_RidVec_Pointer_MyStruct_Iterable(this._vec);

   Iterator<dart_ffi.Pointer<ffigen_bind.RawMyStruct>> get iterator =>
     Rid_RidVec_Pointer_MyStruct_Iterator(this._vec);
 }
