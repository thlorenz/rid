import '../wasm_binding.dart' as wasm_bind;
import '../wasm_reply_channel.dart';

extension Rid_ExtOnPointerInt8 on dart_ffi.Pointer<dart_ffi.Int8> {
  String toDartString([int? len]) {
    return rid_ffi.ptrInt8ToDartString(this);
  }

  void free() {
    return rid_ffi.ptrInt8Free(this);
  }
}

final ReplyChannel<PostedReply> replyChannel =
    ReplyChannel.instance(_dl, wasmDecode, _isDebugMode);


//
// Exporting Native Library to call Rust functions directly
//
// IF WASM {
PostedReply wasmDecode(ReplyStruct reply) {
  return PostedReply._(Reply.values[reply.ty], reply.reqId, null);
}

const WIP_WASM = 'target/wasm32-unknown-unknown/debug/wasm_example.wasm';
final _dl = wasm_bind.WasmLibrary.init(WIP_WASM);
final rid_ffi = _dl;
// } ELSE {
// final dart_ffi.DynamicLibrary _dl = _open();
// final rid_ffi = ffigen_bind.NativeLibrary(_dl);
// }
