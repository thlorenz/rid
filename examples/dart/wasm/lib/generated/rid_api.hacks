import '../wasm_binding.dart' as wasm_bind;
import '../wasm_reply_channel.dart';




  Future<PostedReply> msgInc({Duration? timeout}) {
    final reqId = replyChannel.reqId;
    rid_ffi.rid_msg_Inc(
      reqId,
    );
    return Future.value(PostedReply._(Reply.Inced, reqId, null));
  }


final ReplyChannel<PostedReply> replyChannel =
    ReplyChannel.instance(_dl, wasmDecode, _isDebugMode);




//
// Exporting Native Library to call Rust functions directly
//
// IF WASM {
PostedReply wasmDecode(ReplyStruct reply) {
  return PostedReply._(Reply.values[reply.ty], reply.reqId, null);
}

const WIP_WASM = 'target/wasm32-unknown-unknown/debug/wasm_example.wasm';
final rid_ffi = wasm_bind.WasmLibrary.init(WIP_WASM);
final _dl = rid_ffi;
// } ELSE {
// final dart_ffi.DynamicLibrary _dl = _open();
// final rid_ffi = ffigen_bind.NativeLibrary(_dl);
// }
